}
}
return(FALSE)
}
board <- matrix(0, 9, 9)
solved <- solve_sudoku(board)
if (!solved) {
stop("Failed to generate a Sudoku board.")
}
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print(sudoku_board) # Print the board to check if it's generated correctly
View(print_sudoku)
# Load necessary library
library(grid)
# Function to print the Sudoku board with deeppink color
print_sudoku <- function(board) {
grid.newpage()
# Draw grid lines
for (i in 0:9) {
if (i %% 3 == 0) {
grid.lines(x = c(0, 1), y = c(i/9, i/9), gp = gpar(col = "deeppink", lwd = 2))
grid.lines(x = c(i/9, i/9), y = c(0, 1), gp = gpar(col = "deeppink", lwd = 2))
} else {
grid.lines(x = c(0, 1), y = c(i/9, i/9), gp = gpar(col = "deeppink", lwd = 1))
grid.lines(x = c(i/9, i/9), y = c(0, 1), gp = gpar(col = "deeppink", lwd = 1))
}
}
# Add numbers
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] != 0) {
grid.text(board[i, j], x = (j - 0.5) / 9, y = 1 - (i - 0.5) / 9, gp = gpar(fontsize = 15, col = "deeppink"))
}
}
}
}
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
board <- matrix(0, 9, 9)
# A function to check if a number can be placed at a given position
is_valid <- function(board, num, row, col) {
for (i in 1:9) {
if (board[row, i] == num || board[i, col] == num) return(FALSE)
}
box_row <- (row - 1) %/% 3 * 3 + 1
box_col <- (col - 1) %/% 3 * 3 + 1
for (i in box_row:(box_row + 2)) {
for (j in box_col:(box_col + 2)) {
if (board[i, j] == num) return(FALSE)
}
}
return(TRUE)
}
# A function to solve the board using backtracking
solve_sudoku <- function(board) {
for (row in 1:9) {
for (col in 1:9) {
if (board[row, col] == 0) {
for (num in sample(1:9)) {
if (is_valid(board, num, row, col)) {
board[row, col] <<- num
if (solve_sudoku(board)) return(TRUE)
board[row, col] <<- 0
}
}
return(FALSE)
}
}
}
return(TRUE)
}
# Generate a completely solved Sudoku board
solve_sudoku(board)
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print(sudoku_board) # Print the board to check if it's generated correctly
print_sudoku(sudoku_board)
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
# Initialize an empty 9x9 Sudoku board
board <- matrix(0, nrow = 9, ncol = 9)
# Recursive function to fill the Sudoku board
fill_board <- function(board, row = 1, col = 1) {
if (row > 9) return(TRUE)  # Base case: the entire board is filled
next_row <- row + ifelse(col == 9, 1, 0)
next_col <- ifelse(col == 9, 1, col + 1)
# Randomly shuffle numbers 1 to 9 for each row and try placing them
for (num in sample(1:9)) {
if (is_valid(board, num, row, col)) {
board[row, col] <- num
if (fill_board(board, next_row, next_col)) return(TRUE)
board[row, col] <- 0
}
}
return(FALSE)
}
# Function to check if a number can be placed at a given position
is_valid <- function(board, num, row, col) {
# Check if the number is not already present in the same row, column, or 3x3 subgrid
return(!(num %in% board[row, ]) && !(num %in% board[ , col]) &&
!(num %in% board[((row - 1) %/% 3) * 3 + 1:3, ((col - 1) %/% 3) * 3 + 1:3]))
}
# Start filling the board
fill_board(board)
return(board)
}
# Generate a new Sudoku board
sudoku_board <- generate_sudoku()
# Print the Sudoku board
print_sudoku <- function(board) {
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] != 0) {
cat(board[i, j], " ", sep = "")
} else {
cat(". ", sep = "")
}
if (j %% 3 == 0 && j < 9) cat("| ")
}
cat("\n")
if (i %% 3 == 0 && i < 9) cat("------+-------+------\n")
}
}
# Print the generated Sudoku board
print_sudoku(sudoku_board)
q()
# Load necessary libraries
library(grid)
# Function to draw SpongeBob
draw_spongebob <- function() {
# Create a new plot
grid.newpage()
# Define colors
spongebob_color <- "yellow"  # SpongeBob's body color
eye_color <- "white"
pupil_color <- "black"
# Draw SpongeBob's body
grid.rect(x = 0.3, y = 0.3, width = 0.4, height = 0.4, gp = gpar(fill = spongebob_color))
# Calculate center position of SpongeBob's face
face_center_x <- 0.5
face_center_y <- 0.5
# Draw SpongeBob's eyes
grid.circle(x = face_center_x - 0.1, y = face_center_y, r = 0.05, gp = gpar(fill = eye_color))
grid.circle(x = face_center_x + 0.1, y = face_center_y, r = 0.05, gp = gpar(fill = eye_color))
# Draw SpongeBob's pupils
grid.circle(x = face_center_x - 0.1, y = face_center_y, r = 0.02, gp = gpar(fill = pupil_color))
grid.circle(x = face_center_x + 0.1, y = face_center_y, r = 0.02, gp = gpar(fill = pupil_color))
# Draw SpongeBob's mouth
grid.lines(x = c(face_center_x - 0.1, face_center_x + 0.1), y = c(face_center_y - 0.1, face_center_y - 0.1), gp = gpar(col = "black", lwd = 2))
}
# Draw SpongeBob
draw_spongebob()
q()
q()
phy_data <- read_csv("data/physaria_buf_climate_data_20240717.csv")
library(tidyverse)
library(RColorBrewer)
library(ggpubr)
setwd("C:/Users/maial/Downloads/MBG REU/MOBOT_Physaria")
phy_data <- read_csv("data/physaria_buf_climate_data_20240717.csv")
View(phy_data)
install.packages("esquisse")
library(esquisse)
esquisser(phy_data)
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_1, y = leafLong.10)) +
geom_point(color = "deeppink") +
geom_smooth(method = "lm", color = "purple3", se = TRUE) +  # Add linear regression line
labs(x = "Green Pixel Area", y = "Flower Open at Week 15 (flwrOpen.15)") +
theme_bw() +
scale_y_continuous(breaks = seq(floor(min(phy_data$wc2.1_30s_bio_1)), ceiling(max(phy_data$wc2.1_30s_bio_1)), by = 1))
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_1, y = leafLong.10)) +
geom_point(color = "deeppink") +
geom_smooth(method = "lm", color = "purple3", se = TRUE) +  # Add linear regression line
labs(x = "Green Pixel Area", y = "Flower Open at Week 15 (flwrOpen.15)") +
theme_bw()
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_1, y = leafLong.10)) +
geom_point(color = "deeppink") +
geom_smooth(method = "lm", color = "purple3", se = TRUE) +  # Add linear regression line
theme_bw()
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_10, y = leafLong.10)) +
geom_point(color = "deeppink") +
geom_smooth(method = "lm", color = "purple3", se = TRUE) +  # Add linear regression line
theme_bw()
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_11, y = leafLong.10)) +
geom_point(color = "deeppink") +
geom_smooth(method = "lm", color = "purple3", se = TRUE) +  # Add linear regression line
theme_bw()
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_16, y = leafLong.10)) +
geom_point(color = "deeppink") +
geom_smooth(method = "lm", color = "purple3", se = TRUE) +  # Add linear regression line
theme_bw()
ggplot(data = phy_data, aes(x = wc2.1_30s_bio_16, y = leafLong.10)) +
geom_point(color = "deeppink") +
theme_bw()
setwd("C:/Users/maial/Downloads/MBG REU/MOBOT_Physaria")
choose_big_number <- function(x){
x <- as.character(x)
x_splited <- str_split(str_remove_all(x, " "), "/")
x_big <- lapply(x_splited, function(x){x = as.numeric(x); x = sort(x, decreasing = TRUE, na.last = TRUE); return(x[[1]])})
return(unlist(x_big))
}
convert_Y_one <- function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
TRUE ~ NA_real_
)
}
physaria_buf_climate <- read_csv("./data/physaria_buf_climate_data_20240717.csv", na = c("", "NA", "N/A", "DNR"))%>%
mutate(stemDia.1 = choose_big_number(stemDia.1), stemLength.1 = choose_big_number(stemLength.1))%>%
mutate_at(.vars = all_of(c("flwrBud.1", "flwrBud.2", "flwrOpen.1", "flwrOpen.2", "fruitPres.1", "fruitPres.2", "fruitPres.3", "fruitPres.4", "fruitDeh.1", "fruitDeh.2", "fruitDeh.3", "fruitDeh.4")), .funs = "convert_Y_one")
colnames(physaria_buf_climate)
str(physaria_buf_climate)
uni_colnames <- unique(str_split_i(colnames(physaria_buf_climate), "[.]", 1))[16:30]
uni_colnames
uni_colnames <- unique(str_split_i(colnames(physaria_buf_climate), "[.]", 1))[16:160]
uni_colnames
uni_colnames <- unique(str_split_i(colnames(physaria_buf_climate), "[.]", 1))[16:30]
uni_colnames
sapply(uni_colnames, function(x){select(physaria_buf_climate, matches(x)) %>% str()})
date_info <- physaria_buf_climate %>%
select(str_c("Date.", 1:15))%>% # add something
.[1,]%>%
pivot_longer(cols = starts_with("Date"), names_to = "Date_index", values_to = "Date")%>%
mutate(Date_index = str_remove(Date_index, "Date."))%>%
mutate(Date = str_replace(Date, pattern = "/24$", replacement = "/2024"))
physaria_buf_climate_l <- physaria_buf_climate %>%
# Select the columns needed
select(Index, TemporaryID, MaternalLine, FlowerHead, State, County, Longitude, Latitude, wc2.1_30s_bio_1, wc2.1_30s_bio_2, wc2.1_30s_bio_3, wc2.1_30s_bio_4, wc2.1_30s_bio_5, wc2.1_30s_bio_6, wc2.1_30s_bio_7, wc2.1_30s_bio_8, wc2.1_30s_bio_9, wc2.1_30s_bio_10, wc2.1_30s_bio_11, wc2.1_30s_bio_12, wc2.1_30s_bio_13, wc2.1_30s_bio_14, wc2.1_30s_bio_15, wc2.1_30s_bio_16, wc2.1_30s_bio_17, wc2.1_30s_bio_18, wc2.1_30s_bio_19, wc2.1_30s_elev, starts_with(uni_colnames[3:15])) %>%
# Pivot the data from wide to long format
pivot_longer(cols = starts_with(uni_colnames[3:15]),
names_to = c("variable_name", "Date_index"),
names_sep = "[.]",
values_to = "values") %>%
# Join with date_info to get date
left_join(date_info, by = "Date_index") %>%
# Convert the date column to Date format
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
unique(physaria_buf_climate_l$variable_name)
write_csv(physaria_buf_climate_l, "./data/physaria_buf_climate_data_20240717.csv")
write_xlsx(physaria_buf_climate_l, "./data/physaria_buf_climate_data_20240717.xlsx")
View(physaria_buf_climate_l)
write_xlsx(physaria_buf_climate_l, "./data/physaria_buf_climate_data_20240717.xlsx")
install.packages("writexl")
install.packages("writexl")
library(writexl)
write_xlsx(physaria_buf_climate_l, "./data/physaria_buf_climate_data_20240717.xlsx")
write_csv(physaria_buf_climate_l, "./data/physaria_buf_climate_data_20240717_l.csv")
write_xlsx(physaria_buf_climate_l, "./data/physaria_buf_climate_data_20240717_l.xlsx")
phy_tidy_data <- read_csv("data/physaria_buf_climate_data_20240717_l.csv")
unique(phy_tidy_data$variable_name)
# Custom color palette with shades of pink and purple
palette <- c("thistle", "mediumpurple", "deeppink", "maroon3", "magenta", "pink", "lavender", "purple")
View(physaria_buf_climate_l)
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"),
aes(x = wc2.1_30s_bio_1, y = values, fill = wc2.1_30s_bio_1)) +
geom_violin(color = "black") +
geom_point(position = position_jitter(width = 0.05)) +
scale_fill_manual(values = palette) +
scale_y_continuous(name = expression("Leaf area ("~mm^2~")")) +
labs(x = "Annual Mean Temperature", y = "Leaf Area") +
theme_bw() +
theme(legend.position = "none")
p
p
p
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"),
aes(x = wc2.1_30s_bio_1, y = values, fill = wc2.1_30s_bio_1)) +
geom_violin(color = "black") +
geom_point(position = position_jitter(width = 0.05)) +
scale_fill_manual() +
scale_y_continuous(name = expression("Leaf area ("~mm^2~")")) +
labs(x = "Annual Mean Temperature", y = "Leaf Area") +
theme_bw() +
theme(legend.position = "none")
p
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"),
aes(x = wc2.1_30s_bio_1, y = values, fill = wc2.1_30s_bio_1)) +
geom_violin(color = "black") +
geom_point(position = position_jitter(width = 0.05)) +
scale_y_continuous(name = expression("Leaf area ("~mm^2~")")) +
labs(x = "Annual Mean Temperature", y = "Leaf Area") +
theme_bw() +
theme(legend.position = "none")
p
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_1, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_2, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_7, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_12, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_1, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Mean Temperature")+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = as.factor(wc2.1_30s_bio_1), y = values)) +
geom_boxplot() +
scale_x_discrete(name = "Annual Mean Temperature") +
scale_y_continuous(name = "Leaf Area") +
facet_wrap(.~variable_name, nrow = 1) +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_1, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Mean Temperature")+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
p2 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_7, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Temperature Annual Range")
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p2 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_7, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Temperature Annual Range")+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p2
p3 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_12, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Precipatation")
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p3 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_12, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Precipatation")+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p3
p4 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_elev, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Elevation")
p4 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_elev, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Elevation")+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p4
p5 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafLong"), aes(x = wc2.1_30s_elev, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafLong"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafLong"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafLong"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafLong"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Elevation")+
scale_y_continuous(name = "Leaf Length (cm)")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p5
p6 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafLong"), aes(x = wc2.1_30s_bio_1, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafLong"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafLong"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafLong"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafLong"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Mean Temperature")+
scale_y_continuous(name = "Leaf Length (cm)")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p6
p7 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafLong"), aes(x = wc2.1_30s_bio_12, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafLong"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafLong"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafLong"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafLong"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Precipatation")+
scale_y_continuous(name = "Leaf Long")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p7
p8 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafLong"), aes(x = wc2.1_30s_bio_7, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafLong"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafLong"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafLong"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafLong"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Temperature Annual Range")+
scale_y_continuous(name = "Leaf Long")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p8
p7 <- ggplot(data = filter(phy_tidy_data, variable_name == "leafLong"), aes(x = wc2.1_30s_bio_12, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafLong"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafLong"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafLong"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafLong"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Precipatation")+
scale_y_continuous(name = "Leaf Long")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p7
# Make sure your dataset has no more levels of MaternalLine than colors in the palette
p <- ggplot(data = filter(phy_tidy_data, variable_name == "leafArea"), aes(x = wc2.1_30s_bio_1, y = values))+
geom_point()+
geom_point(data = filter(phy_tidy_data, variable_name == "leafArea"), color = "red")+
stat_smooth(data = filter(phy_tidy_data, variable_name == "leafArea"), method = "lm", color = "blue")+
stat_cor(data = filter(phy_tidy_data, variable_name == "leafArea"),method = "pearson", label.x.npc = 0, label.y.npc = 0.80)+
stat_regline_equation(data = filter(phy_tidy_data, variable_name == "leafArea"),label.x.npc = 0, label.y.npc = 0.95)+
scale_x_continuous(name = "Annual Mean Temperature")+
scale_y_continuous(name = "Leaf Area")+
facet_wrap(.~variable_name, nrow = 1)+
theme_bw()+
theme(panel.grid.minor = element_blank(), legend.position = "bottom")
p
ggsave("./figures/phy_figure_bio1.png", width = 10, height = 8, dpi = 600)
source("C:/Users/maial/Downloads/MBG REU/MOBOT_Physaria/script/tidy_phy_data_maia_07092024.R")
