q()
install.packages("grid")
# Load necessary library
library(grid)
# Function to print the Sudoku board with deeppink color
print_sudoku <- function(board) {
grid.newpage()
pushViewport(viewport(layout = grid.layout(9, 9)))
for (i in 1:9) {
for (j in 1:9) {
grid.text(board[i, j], x = (j - 0.5) / 9, y = (9 - i + 0.5) / 9, gp = gpar(fontsize = 15, col = "deeppink"))
}
}
for (i in 1:9) {
if (i %% 3 == 1) {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
} else {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(col = "deeppink"))
}
}
grid.lines(x = c(0, 1), y = c(0, 0), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c(1, 1), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
}
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
solve_sudoku <- function(board) {
find_empty <- function(board) {
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] == 0) return(c(i, j))
}
}
return(NULL)
}
is_valid <- function(board, num, pos) {
for (i in 1:9) {
if (board[pos[1], i] == num && pos[2] != i) return(FALSE)
if (board[i, pos[2]] == num && pos[1] != i) return(FALSE)
}
box_x <- (pos[2] - 1) %/% 3
box_y <- (pos[1] - 1) %/% 3
for (i in 1:3) {
for (j in 1:3) {
if (board[box_y * 3 + i, box_x * 3 + j] == num && c(box_y * 3 + i, box_x * 3 + j) != pos) return(FALSE)
}
}
return(TRUE)
}
empty <- find_empty(board)
if (is.null(empty)) return(TRUE)
row <- empty[1]
col <- empty[2]
for (num in sample(1:9)) {
if (is_valid(board, num, c(row, col))) {
board[row, col] <<- num
if (solve_sudoku(board)) return(TRUE)
board[row, col] <<- 0
}
}
return(FALSE)
}
board <- matrix(0, 9, 9)
solve_sudoku(board)
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print_sudoku(sudoku_board)
# Load necessary library
library(grid)
# Function to print the Sudoku board with deeppink color
print_sudoku <- function(board) {
grid.newpage()
pushViewport(viewport(layout = grid.layout(9, 9)))
for (i in 1:9) {
for (j in 1:9) {
grid.text(board[i, j], x = (j - 0.5) / 9, y = (9 - i + 0.5) / 9, gp = gpar(fontsize = 15, col = "deeppink"))
}
}
for (i in 1:9) {
if (i %% 3 == 1) {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
} else {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(col = "deeppink"))
}
}
grid.lines(x = c(0, 1), y = c(0, 0), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c(1, 1), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
}
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
solve_sudoku <- function(board) {
find_empty <- function(board) {
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] == 0) return(c(i, j))
}
}
return(NULL)
}
is_valid <- function(board, num, pos) {
for (i in 1:9) {
if (board[pos[1], i] == num && pos[2] != i) return(FALSE)
if (board[i, pos[2]] == num && pos[1] != i) return(FALSE)
}
box_x <- (pos[2] - 1) %/% 3
box_y <- (pos[1] - 1) %/% 3
for (i in 1:3) {
for (j in 1:3) {
if (board[box_y * 3 + i, box_x * 3 + j] == num && c(box_y * 3 + i, box_x * 3 + j) != pos) return(FALSE)
}
}
return(TRUE)
}
empty <- find_empty(board)
if (is.null(empty)) return(TRUE)
row <- empty[1]
col <- empty[2]
for (num in sample(1:9)) {
if (is_valid(board, num, c(row, col))) {
board[row, col] <<- num
if (solve_sudoku(board)) return(TRUE)
board[row, col] <<- 0
}
}
return(FALSE)
}
board <- matrix(0, 9, 9)
solve_sudoku(board)
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print_sudoku(sudoku_board)
# Load necessary library
library(grid)
# Function to print the Sudoku board with deeppink color
print_sudoku <- function(board) {
grid.newpage()
pushViewport(viewport(layout = grid.layout(9, 9)))
for (i in 1:9) {
for (j in 1:9) {
grid.text(board[i, j], x = (j - 0.5) / 9, y = (9 - i + 0.5) / 9, gp = gpar(fontsize = 15, col = "deeppink"))
}
}
for (i in 1:9) {
if (i %% 3 == 1) {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
} else {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(col = "deeppink"))
}
}
grid.lines(x = c(0, 1), y = c(0, 0), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c(1, 1), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
}
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
solve_sudoku <- function(board) {
find_empty <- function(board) {
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] == 0) return(c(i, j))
}
}
return(NULL)
}
is_valid <- function(board, num, pos) {
for (i in 1:9) {
if (board[pos[1], i] == num && pos[2] != i) return(FALSE)
if (board[i, pos[2]] == num && pos[1] != i) return(FALSE)
}
box_x <- (pos[2] - 1) %/% 3
box_y <- (pos[1] - 1) %/% 3
for (i in 1:3) {
for (j in 1:3) {
if (board[box_y * 3 + i, box_x * 3 + j] == num && c(box_y * 3 + i, box_x * 3 + j) != pos) return(FALSE)
}
}
return(TRUE)
}
empty <- find_empty(board)
if (is.null(empty)) return(TRUE)
row <- empty[1]
col <- empty[2]
for (num in sample(1:9)) {
if (is_valid(board, num, c(row, col))) {
board[row, col] <<- num
if (solve_sudoku(board)) return(TRUE)
board[row, col] <<- 0
}
}
return(FALSE)
}
board <- matrix(0, 9, 9)
solved <- solve_sudoku(board)
if (!solved) {
stop("Failed to generate a Sudoku board.")
}
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print(sudoku_board) # Print the board to check if it's generated correctly
# Load necessary library
library(grid)
# Function to print the Sudoku board with deeppink color
print_sudoku <- function(board) {
grid.newpage()
pushViewport(viewport(layout = grid.layout(9, 9)))
for (i in 1:9) {
for (j in 1:9) {
grid.text(board[i, j], x = (j - 0.5) / 9, y = (9 - i + 0.5) / 9, gp = gpar(fontsize = 15, col = "deeppink"))
}
}
for (i in 1:9) {
if (i %% 3 == 1) {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
} else {
grid.lines(x = c(0, 1), y = c((9 - i + 1) / 9, (9 - i + 1) / 9), gp = gpar(col = "deeppink"))
grid.lines(x = c((i - 1) / 9, (i - 1) / 9), y = c(0, 1), gp = gpar(col = "deeppink"))
}
}
grid.lines(x = c(0, 1), y = c(0, 0), gp = gpar(lwd = 2, col = "deeppink"))
grid.lines(x = c(1, 1), y = c(0, 1), gp = gpar(lwd = 2, col = "deeppink"))
}
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
solve_sudoku <- function(board) {
find_empty <- function(board) {
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] == 0) return(c(i, j))
}
}
return(NULL)
}
is_valid <- function(board, num, pos) {
for (i in 1:9) {
if (board[pos[1], i] == num && pos[2] != i) return(FALSE)
if (board[i, pos[2]] == num && pos[1] != i) return(FALSE)
}
box_x <- (pos[2] - 1) %/% 3
box_y <- (pos[1] - 1) %/% 3
for (i in 1:3) {
for (j in 1:3) {
if (board[box_y * 3 + i, box_x * 3 + j] == num && c(box_y * 3 + i, box_x * 3 + j) != pos) return(FALSE)
}
}
return(TRUE)
}
empty <- find_empty(board)
if (is.null(empty)) return(TRUE)
row <- empty[1]
col <- empty[2]
for (num in sample(1:9)) {
if (is_valid(board, num, c(row, col))) {
board[row, col] <<- num
if (solve_sudoku(board)) return(TRUE)
board[row, col] <<- 0
}
}
return(FALSE)
}
board <- matrix(0, 9, 9)
solved <- solve_sudoku(board)
if (!solved) {
stop("Failed to generate a Sudoku board.")
}
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print(sudoku_board) # Print the board to check if it's generated correctly
View(print_sudoku)
# Load necessary library
library(grid)
# Function to print the Sudoku board with deeppink color
print_sudoku <- function(board) {
grid.newpage()
# Draw grid lines
for (i in 0:9) {
if (i %% 3 == 0) {
grid.lines(x = c(0, 1), y = c(i/9, i/9), gp = gpar(col = "deeppink", lwd = 2))
grid.lines(x = c(i/9, i/9), y = c(0, 1), gp = gpar(col = "deeppink", lwd = 2))
} else {
grid.lines(x = c(0, 1), y = c(i/9, i/9), gp = gpar(col = "deeppink", lwd = 1))
grid.lines(x = c(i/9, i/9), y = c(0, 1), gp = gpar(col = "deeppink", lwd = 1))
}
}
# Add numbers
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] != 0) {
grid.text(board[i, j], x = (j - 0.5) / 9, y = 1 - (i - 0.5) / 9, gp = gpar(fontsize = 15, col = "deeppink"))
}
}
}
}
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
board <- matrix(0, 9, 9)
# A function to check if a number can be placed at a given position
is_valid <- function(board, num, row, col) {
for (i in 1:9) {
if (board[row, i] == num || board[i, col] == num) return(FALSE)
}
box_row <- (row - 1) %/% 3 * 3 + 1
box_col <- (col - 1) %/% 3 * 3 + 1
for (i in box_row:(box_row + 2)) {
for (j in box_col:(box_col + 2)) {
if (board[i, j] == num) return(FALSE)
}
}
return(TRUE)
}
# A function to solve the board using backtracking
solve_sudoku <- function(board) {
for (row in 1:9) {
for (col in 1:9) {
if (board[row, col] == 0) {
for (num in sample(1:9)) {
if (is_valid(board, num, row, col)) {
board[row, col] <<- num
if (solve_sudoku(board)) return(TRUE)
board[row, col] <<- 0
}
}
return(FALSE)
}
}
}
return(TRUE)
}
# Generate a completely solved Sudoku board
solve_sudoku(board)
return(board)
}
# Generate and print the Sudoku board
sudoku_board <- generate_sudoku()
print(sudoku_board) # Print the board to check if it's generated correctly
print_sudoku(sudoku_board)
# Function to generate a valid Sudoku board
generate_sudoku <- function() {
# Initialize an empty 9x9 Sudoku board
board <- matrix(0, nrow = 9, ncol = 9)
# Recursive function to fill the Sudoku board
fill_board <- function(board, row = 1, col = 1) {
if (row > 9) return(TRUE)  # Base case: the entire board is filled
next_row <- row + ifelse(col == 9, 1, 0)
next_col <- ifelse(col == 9, 1, col + 1)
# Randomly shuffle numbers 1 to 9 for each row and try placing them
for (num in sample(1:9)) {
if (is_valid(board, num, row, col)) {
board[row, col] <- num
if (fill_board(board, next_row, next_col)) return(TRUE)
board[row, col] <- 0
}
}
return(FALSE)
}
# Function to check if a number can be placed at a given position
is_valid <- function(board, num, row, col) {
# Check if the number is not already present in the same row, column, or 3x3 subgrid
return(!(num %in% board[row, ]) && !(num %in% board[ , col]) &&
!(num %in% board[((row - 1) %/% 3) * 3 + 1:3, ((col - 1) %/% 3) * 3 + 1:3]))
}
# Start filling the board
fill_board(board)
return(board)
}
# Generate a new Sudoku board
sudoku_board <- generate_sudoku()
# Print the Sudoku board
print_sudoku <- function(board) {
for (i in 1:9) {
for (j in 1:9) {
if (board[i, j] != 0) {
cat(board[i, j], " ", sep = "")
} else {
cat(". ", sep = "")
}
if (j %% 3 == 0 && j < 9) cat("| ")
}
cat("\n")
if (i %% 3 == 0 && i < 9) cat("------+-------+------\n")
}
}
# Print the generated Sudoku board
print_sudoku(sudoku_board)
q()
# Load necessary libraries
library(grid)
# Function to draw SpongeBob
draw_spongebob <- function() {
# Create a new plot
grid.newpage()
# Define colors
spongebob_color <- "yellow"  # SpongeBob's body color
eye_color <- "white"
pupil_color <- "black"
# Draw SpongeBob's body
grid.rect(x = 0.3, y = 0.3, width = 0.4, height = 0.4, gp = gpar(fill = spongebob_color))
# Calculate center position of SpongeBob's face
face_center_x <- 0.5
face_center_y <- 0.5
# Draw SpongeBob's eyes
grid.circle(x = face_center_x - 0.1, y = face_center_y, r = 0.05, gp = gpar(fill = eye_color))
grid.circle(x = face_center_x + 0.1, y = face_center_y, r = 0.05, gp = gpar(fill = eye_color))
# Draw SpongeBob's pupils
grid.circle(x = face_center_x - 0.1, y = face_center_y, r = 0.02, gp = gpar(fill = pupil_color))
grid.circle(x = face_center_x + 0.1, y = face_center_y, r = 0.02, gp = gpar(fill = pupil_color))
# Draw SpongeBob's mouth
grid.lines(x = c(face_center_x - 0.1, face_center_x + 0.1), y = c(face_center_y - 0.1, face_center_y - 0.1), gp = gpar(col = "black", lwd = 2))
}
# Draw SpongeBob
draw_spongebob()
q()
q()
library(tidyverse)
library(RColorBrewer)
library(ggpubr)
setwd("C:/Users/maial/Downloads/MBG REU/MOBOT_Physaria")
phy_tidy_data <- read_csv("data/physaria_buf_climate_data_20240717_l.csv")
phy_climate_data <- read_csv("data/physaria_buf_climate_data_20240717.csv")
unique(phy_tidy_data$variable_name)
install.packages("lme4")
library(lme4)
install.packages("lmerTest")
library(lmerTest)
anova1 <- lmer(leafArea.10 ~ MaternalLine + (1|MaternalLine:FlowerHead), data = phy_climate_data)
summary(anova1)
anova1 <- lmer(leafArea.10 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
summary(anova1)
anova(anova1)
h_phy <- lmer(leafArea.10 ~ (1|MaternalLine/FlowerHead), data = phy_climate_data)
# add all values in variance column
# FlowerHead:MaternalLine or MaternalLine as numerator
summary(h_phy)
h_phy <- lmer(leafArea.10 ~ (1|MaternalLine/FlowerHead), data = phy_climate_data)
h_phy <- lmer(leafArea.10 ~ (1|Site/MaternalLine), data = phy_climate_data)
# add all values in variance column
# FlowerHead:MaternalLine or MaternalLine as numerator
summary(h_phy)
anova2 <- lmer(leafLong.10 ~ Site + (1|Site/MaternalLine), data = phy_climate_data)
phy_climate_data$leafLong.10 <- as.numeric(phy_climate_data$leafLong.10)
anova2 <- lmer(leafLong.10 ~ Site + (1|Site/MaternalLine), data = phy_climate_data)
anova(anova2)
anova2 <- lmer(leafLong.10 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova2)
h_leafLong <- lmer(leafLong.10 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_leafLong)
anova3 <- lmer(numRos.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
phy_climate_data$numRos.1 <- as.numeric(phy_climate_data$numRos.1)
anova3 <- lmer(numRos.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova3)
phy_climate_data$numRos.1 <- as.numeric(phy_climate_data$numRos.1)
anova3 <- lmer(numRos.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova3)
h_numRos <- lmer(numRos.1 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_numRos)
phy_climate_data$numStem.1 <- as.numeric(phy_climate_data$numStem.1)
anova4 <- lmer(numStem.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova4)
h_numStem <- lmer(numStem.1 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_numStem)
phy_climate_data$stemDia.1 <- as.numeric(phy_climate_data$stemDia.1)
anova5 <- lmer(stemDia.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova5)
h_stemDia <- lmer(stemDia.1 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_stemDia)
phy_climate_data$stemLength.1 <- as.numeric(phy_climate_data$stemLength.1)
anova6 <- lmer(stemLength.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova6)
h_stemLength <- lmer(stemLength.1 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_stemLength)
phy_climate_data$numLeaf.1 <- as.numeric(phy_climate_data$numLeaf.1)
anova7 <- lmer(numLeaf.1 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova7)
h_numLeaf <- lmer(numLeaf.1 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_numLeaf)
phy_climate_data$leafWide.10 <- as.numeric(phy_climate_data$leafWide.10)
anova8 <- lmer(leafWide.10 ~ Site + (1|Site:MaternalLine), data = phy_climate_data)
anova(anova8)
h_leafWide <- lmer(leafWide.10 ~ (1|Site/MaternalLine), data = phy_climate_data)
summary(h_leafWide)
source("C:/Users/maial/Downloads/MBG REU/MOBOT_Physaria/script/tidy_phy_data_maia_07092024.R")
